00100_000_00000001      // MOVS R0, #1              R0 = 1
010001100_0000_001      // MOV R1, R0               R1 = 1

/*
// --------- R0 = 1, R1 = 1, everything else  = 0 ----------
// Test ADD and SUB instructions
0001110_001_000_010     // ADDS R2, R0 ,#1          R2 = 2
0001100_000_001_011     // ADDS R3, R0, R1          R3 = 2
101100000_0000001       // ADD SP, SP, #1           SP = 1
0001101_000_001_010     // SUBS R2, R0, R1          R2 = 0
0001111_001_000_011     // SUBS R3, R0, #1          R3 = 0
101100001_0000001       // SUB SP, SP, #1           SP = 0 


// --------- R0 = 1, R1 = 1, everything else  = 0 ----------
// Test ALU instructions
010000_0000_010_001     // ANDS R1, R2              R1 = 0
010000_1100_000_001     // ORRS R1, R0              R1 = 1
010000_0001_000_001     // EORS R1, R0              R1 = 0
010000_1111_000_001     // MVNS R1, R0              R1 = FFFFFFFE
010001100_0000_001      // MOV R1, R0               R1 = 1


// --------- R0 = 1, R1 = 1, everything else  = 0 ----------
// Test shifter instructions
010000_0010_000_001     // LSLS R1, R1, R0          R1 = 2
010000_0011_000_001     // LSRS R1, R1, R0          R1 = 1
010000_1111_000_001     // MVNS R1, R0              R1 = FFFFFFFE
010000_0100_000_001     // ASRS R1, R1, R0          R1 = FFFFFFFF
010000_1111_000_001     // MVNS R1, R0              R1 = FFFFFFFE
010000_0111_000_001     // RORS R1, R1, R0          R1 = 7FFFFFFF
010001100_0000_001      // MOV R1, R0               R1 = 1


// --------- R0 = 1, R1 = 1, everything else  = 0 ----------
// Test load and store
01100_00011_000_001     // Mem[4] = 1
01100_00111_000_001     // Mem[8] = 1
01101_00111_000_010     // R2 = Mem[8] = 1
01101_00011_000_011     // R3 = Mem[4] = 1
00100_011_00000000      // MOVS R3, #0              R3 = 0
00100_010_00000000      // MOVS R2, #0              R2 = 0
*/

// --------- R0 = 1, R1 = 1, everything else  = 0 ----------
// Test branch
00100_010_00000101      // MOVS R2, #5              R2 = 5
//010001110_0010_000      // BX R2                    PC = R2 (skip next instruction)
//00100_000_00000000      // MOVS R0, #0              R0 = 0, should never happen
11100_00000000010       // B +2 (skip next instruction)
00100_000_00000000      // MOVS R0, #0              R0 = 0, should never happen
0100001010_000_001      // CMP R1, R0
1101_0000_00000010      // B.EQ +2 (skip next instruction)
00100_000_00000000      // MOVS R0, #0              R0 = 0, should never happen
0100010100_000010       // BL +2 (skip next instruction, update link register)
00100_000_00000000      // MOVS R0, #0              R0 = 0, should never happen
00100_011_00000111      // MOVS R3, #7              R3 = 7, success
1011111100000000        // NOP

0100011100100000       // BX R4


